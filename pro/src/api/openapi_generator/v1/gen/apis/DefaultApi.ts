/* tslint:disable */
/* eslint-disable */
/**
 * pass Culture pro private API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { EmptyResponse, ModelObject, handleGeneratedApiResponse, safeFetch } from "api/helpers";
import * as runtime from '../runtime';
import {
    BookingStatusFilter,
    BookingStatusFilterFromJSON,
    BookingStatusFilterToJSON,
    BusinessUnitEditionBodyModel,
    BusinessUnitEditionBodyModelFromJSON,
    BusinessUnitEditionBodyModelToJSON,
    BusinessUnitResponseModel,
    BusinessUnitResponseModelFromJSON,
    BusinessUnitResponseModelToJSON,
    CategoriesResponseModel,
    CategoriesResponseModelFromJSON,
    CategoriesResponseModelToJSON,
    CollectiveBookingStatusFilter,
    CollectiveBookingStatusFilterFromJSON,
    CollectiveBookingStatusFilterToJSON,
    CollectiveOfferResponseModel,
    CollectiveOfferResponseModelFromJSON,
    CollectiveOfferResponseModelToJSON,
    CreateOffererQueryModel,
    CreateOffererQueryModelFromJSON,
    CreateOffererQueryModelToJSON,
    CreateThumbnailResponseModel,
    CreateThumbnailResponseModelFromJSON,
    CreateThumbnailResponseModelToJSON,
    EditVenueBodyModel,
    EditVenueBodyModelFromJSON,
    EditVenueBodyModelToJSON,
    EducationalStockCreationBodyModel,
    EducationalStockCreationBodyModelFromJSON,
    EducationalStockCreationBodyModelToJSON,
    EducationalStockEditionBodyModel,
    EducationalStockEditionBodyModelFromJSON,
    EducationalStockEditionBodyModelToJSON,
    FeatureResponseModel,
    FeatureResponseModelFromJSON,
    FeatureResponseModelToJSON,
    GenerateOffererApiKeyResponse,
    GenerateOffererApiKeyResponseFromJSON,
    GenerateOffererApiKeyResponseToJSON,
    GetCollectiveOfferResponseModel,
    GetCollectiveOfferResponseModelFromJSON,
    GetCollectiveOfferResponseModelToJSON,
    GetEducationalOfferersResponseModel,
    GetEducationalOfferersResponseModelFromJSON,
    GetEducationalOfferersResponseModelToJSON,
    GetIndividualOfferResponseModel,
    GetIndividualOfferResponseModelFromJSON,
    GetIndividualOfferResponseModelToJSON,
    GetOffererResponseModel,
    GetOffererResponseModelFromJSON,
    GetOffererResponseModelToJSON,
    GetOfferersListResponseModel,
    GetOfferersListResponseModelFromJSON,
    GetOfferersListResponseModelToJSON,
    GetOfferersNamesResponseModel,
    GetOfferersNamesResponseModelFromJSON,
    GetOfferersNamesResponseModelToJSON,
    GetVenueResponseModel,
    GetVenueResponseModelFromJSON,
    GetVenueResponseModelToJSON,
    InvoiceResponseModel,
    InvoiceResponseModelFromJSON,
    InvoiceResponseModelToJSON,
    ListBookingsResponseModel,
    ListBookingsResponseModelFromJSON,
    ListBookingsResponseModelToJSON,
    ListCollectiveBookingsResponseModel,
    ListCollectiveBookingsResponseModelFromJSON,
    ListCollectiveBookingsResponseModelToJSON,
    ListOffersOfferResponseModel,
    ListOffersOfferResponseModelFromJSON,
    ListOffersOfferResponseModelToJSON,
    ListVenueProviderResponse,
    ListVenueProviderResponseFromJSON,
    ListVenueProviderResponseToJSON,
    LoginUserBodyModel,
    LoginUserBodyModelFromJSON,
    LoginUserBodyModelToJSON,
    OfferResponseIdModel,
    OfferResponseIdModelFromJSON,
    OfferResponseIdModelToJSON,
    OfferType,
    OfferTypeFromJSON,
    OfferTypeToJSON,
    PatchAllOffersActiveStatusBodyModel,
    PatchAllOffersActiveStatusBodyModelFromJSON,
    PatchAllOffersActiveStatusBodyModelToJSON,
    PatchEducationalOfferBodyModel,
    PatchEducationalOfferBodyModelFromJSON,
    PatchEducationalOfferBodyModelToJSON,
    PatchOfferActiveStatusBodyModel,
    PatchOfferActiveStatusBodyModelFromJSON,
    PatchOfferActiveStatusBodyModelToJSON,
    PatchOfferBodyModel,
    PatchOfferBodyModelFromJSON,
    PatchOfferBodyModelToJSON,
    PatchProUserBodyModel,
    PatchProUserBodyModelFromJSON,
    PatchProUserBodyModelToJSON,
    PatchProUserResponseModel,
    PatchProUserResponseModelFromJSON,
    PatchProUserResponseModelToJSON,
    PostEducationalOfferBodyModel,
    PostEducationalOfferBodyModelFromJSON,
    PostEducationalOfferBodyModelToJSON,
    PostOfferBodyModel,
    PostOfferBodyModelFromJSON,
    PostOfferBodyModelToJSON,
    PostVenueProviderBody,
    PostVenueProviderBodyFromJSON,
    PostVenueProviderBodyToJSON,
    SharedCurrentUserResponseModel,
    SharedCurrentUserResponseModelFromJSON,
    SharedCurrentUserResponseModelToJSON,
    SharedLoginUserResponseModel,
    SharedLoginUserResponseModelFromJSON,
    SharedLoginUserResponseModelToJSON,
    StockIdResponseModel,
    StockIdResponseModelFromJSON,
    StockIdResponseModelToJSON,
    StockIdsResponseModel,
    StockIdsResponseModelFromJSON,
    StockIdsResponseModelToJSON,
    StocksResponseModel,
    StocksResponseModelFromJSON,
    StocksResponseModelToJSON,
    StocksUpsertBodyModel,
    StocksUpsertBodyModelFromJSON,
    StocksUpsertBodyModelToJSON,
    UserOffererResponseModel,
    UserOffererResponseModelFromJSON,
    UserOffererResponseModelToJSON,
    ValidationErrorElement,
    ValidationErrorElementFromJSON,
    ValidationErrorElementToJSON,
    VenueLabelResponseModel,
    VenueLabelResponseModelFromJSON,
    VenueLabelResponseModelToJSON,
    VenueProviderResponse,
    VenueProviderResponseFromJSON,
    VenueProviderResponseToJSON,
    VenueStatsResponseModel,
    VenueStatsResponseModelFromJSON,
    VenueStatsResponseModelToJSON,
    VenueTypeResponseModel,
    VenueTypeResponseModelFromJSON,
    VenueTypeResponseModelToJSON,
} from '../models';

export interface DeleteOfferersDeleteApiKeyRequest {
    apiKeyPrefix: string;
}

export interface DeleteStocksDeleteStockRequest {
    stockId: string;
}

export interface GetBookingsGetBookingsProRequest {
    page?: number;
    venueId?: number | null;
    eventDate?: string | null;
    bookingStatusFilter?: BookingStatusFilter | null;
    bookingPeriodBeginningDate?: string | null;
    bookingPeriodEndingDate?: string | null;
    offerType?: OfferType | null;
    extra?: string;
}

export interface GetCollectiveGetCollectiveBookingsProRequest {
    page?: number;
    venueId?: number | null;
    eventDate?: Date | null;
    bookingStatusFilter?: CollectiveBookingStatusFilter | null;
    bookingPeriodBeginningDate?: Date | null;
    bookingPeriodEndingDate?: Date | null;
    extra?: string;
}

export interface GetCollectiveGetCollectiveOfferRequest {
    offerId: string;
}

export interface GetCollectiveListCollectiveOffersRequest {
    nameOrIsbn?: string | null;
    offererId?: number | null;
    status?: string | null;
    venueId?: number | null;
    categoryId?: string | null;
    creationMode?: string | null;
    periodBeginningDate?: string | null;
    periodEndingDate?: string | null;
}

export interface GetFinanceGetBusinessUnitsRequest {
    offererId?: number | null;
}

export interface GetFinanceGetInvoicesRequest {
    businessUnitId?: number | null;
    periodBeginningDate?: Date | null;
    periodEndingDate?: Date | null;
}

export interface GetOfferersCanOffererCreateEducationalOfferRequest {
    humanizedOffererId: string;
}

export interface GetOfferersGetOffererRequest {
    offererId: string;
}

export interface GetOfferersGetOfferersRequest {
    keywords?: string | null;
    page?: number | null;
    paginate?: number | null;
}

export interface GetOfferersListEducationalOfferersRequest {
    offererId?: string | null;
}

export interface GetOfferersListOfferersNamesRequest {
    validated?: boolean | null;
    validatedForUser?: boolean | null;
}

export interface GetOffersGetOfferRequest {
    offerId: string;
}

export interface GetOffersGetStocksRequest {
    offerId: string;
}

export interface GetOffersListOffersRequest {
    nameOrIsbn?: string | null;
    offererId?: number | null;
    status?: string | null;
    venueId?: number | null;
    categoryId?: string | null;
    creationMode?: string | null;
    periodBeginningDate?: string | null;
    periodEndingDate?: string | null;
}

export interface GetReimbursementsGetReimbursementsCsvRequest {
    venueId?: string;
    reimbursementPeriodBeginningDate?: string;
    reimbursementPeriodEndingDate?: string;
}

export interface GetUserofferersGetUserOffererRequest {
    offererId: string;
}

export interface GetUsersCheckActivationTokenExistsRequest {
    token: string;
}

export interface GetVenueprovidersListVenueProvidersRequest {
    venueId: number;
}

export interface GetVenuesGetVenueRequest {
    venueId: string;
}

export interface GetVenuesGetVenueStatsRequest {
    humanizedVenueId: string;
}

export interface PatchFinanceEditBusinessUnitRequest {
    businessUnitId: number;
    businessUnitEditionBodyModel?: BusinessUnitEditionBodyModel;
}

export interface PatchOffersCancelEducationalOfferBookingRequest {
    offerId: string;
}

export interface PatchOffersEditEducationalOfferRequest {
    offerId: string;
    patchEducationalOfferBodyModel?: PatchEducationalOfferBodyModel;
}

export interface PatchOffersPatchAllOffersActiveStatusRequest {
    patchAllOffersActiveStatusBodyModel?: PatchAllOffersActiveStatusBodyModel;
}

export interface PatchOffersPatchOfferRequest {
    offerId: string;
    patchOfferBodyModel?: PatchOfferBodyModel;
}

export interface PatchOffersPatchOffersActiveStatusRequest {
    patchOfferActiveStatusBodyModel?: PatchOfferActiveStatusBodyModel;
}

export interface PatchStocksEditEducationalStockRequest {
    stockId: string;
    educationalStockEditionBodyModel?: EducationalStockEditionBodyModel;
}

export interface PatchUsersPatchProfileRequest {
    patchProUserBodyModel?: PatchProUserBodyModel;
}

export interface PatchValidateValidateUserRequest {
    token: string;
}

export interface PatchVenuesEditVenueRequest {
    venueId: string;
    editVenueBodyModel?: EditVenueBodyModel;
}

export interface PostOfferersCreateOffererRequest {
    createOffererQueryModel?: CreateOffererQueryModel;
}

export interface PostOfferersGenerateApiKeyRouteRequest {
    offererId: string;
}

export interface PostOffersCreateEducationalOfferRequest {
    postEducationalOfferBodyModel?: PostEducationalOfferBodyModel;
}

export interface PostOffersPostOfferRequest {
    postOfferBodyModel?: PostOfferBodyModel;
}

export interface PostStocksCreateEducationalStockRequest {
    educationalStockCreationBodyModel?: EducationalStockCreationBodyModel;
}

export interface PostStocksUpsertStocksRequest {
    stocksUpsertBodyModel?: StocksUpsertBodyModel;
}

export interface PostUsersSigninRequest {
    loginUserBodyModel?: LoginUserBodyModel;
}

export interface PostVenueprovidersCreateVenueProviderRequest {
    postVenueProviderBody?: PostVenueProviderBody;
}

export interface PutVenueprovidersUpdateVenueProviderRequest {
    postVenueProviderBody?: PostVenueProviderBody;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * 
     * delete_api_key <DELETE>
     */
    async deleteOfferersDeleteApiKeyRaw(requestParameters: DeleteOfferersDeleteApiKeyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiKeyPrefix === null || requestParameters.apiKeyPrefix === undefined) {
            throw new runtime.RequiredError('apiKeyPrefix','Required parameter requestParameters.apiKeyPrefix was null or undefined when calling deleteOfferersDeleteApiKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/offerers/api_keys/{api_key_prefix}`.replace(`{${"api_key_prefix"}}`, encodeURIComponent(String(requestParameters.apiKeyPrefix))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * delete_api_key <DELETE>
     */
    async deleteOfferersDeleteApiKey(apiKeyPrefix: string, initOverrides?: RequestInit): Promise<void> {
        await this.deleteOfferersDeleteApiKeyRaw({ apiKeyPrefix: apiKeyPrefix }, initOverrides);
    }

    /**
     * 
     * delete_stock <DELETE>
     */
    async deleteStocksDeleteStockRaw(requestParameters: DeleteStocksDeleteStockRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StockIdResponseModel>> {
        if (requestParameters.stockId === null || requestParameters.stockId === undefined) {
            throw new runtime.RequiredError('stockId','Required parameter requestParameters.stockId was null or undefined when calling deleteStocksDeleteStock.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/stocks/{stock_id}`.replace(`{${"stock_id"}}`, encodeURIComponent(String(requestParameters.stockId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StockIdResponseModelFromJSON(jsonValue));
    }

    /**
     * 
     * delete_stock <DELETE>
     */
    async deleteStocksDeleteStock(stockId: string, initOverrides?: RequestInit): Promise<StockIdResponseModel> {
        const response = await this.deleteStocksDeleteStockRaw({ stockId: stockId }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * get_bookings_pro <GET>
     */
    async getBookingsGetBookingsProRaw(requestParameters: GetBookingsGetBookingsProRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ListBookingsResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.venueId !== undefined) {
            queryParameters['venueId'] = requestParameters.venueId;
        }

        if (requestParameters.eventDate !== undefined) {
            queryParameters['eventDate'] = requestParameters.eventDate;
        }

        if (requestParameters.bookingStatusFilter !== undefined) {
            queryParameters['bookingStatusFilter'] = requestParameters.bookingStatusFilter;
        }

        if (requestParameters.bookingPeriodBeginningDate !== undefined) {
            queryParameters['bookingPeriodBeginningDate'] = requestParameters.bookingPeriodBeginningDate;
        }

        if (requestParameters.bookingPeriodEndingDate !== undefined) {
            queryParameters['bookingPeriodEndingDate'] = requestParameters.bookingPeriodEndingDate;
        }

        if (requestParameters.offerType !== undefined) {
            queryParameters['offerType'] = requestParameters.offerType;
        }

        if (requestParameters.extra !== undefined) {
            queryParameters['extra'] = requestParameters.extra;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bookings/pro`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListBookingsResponseModelFromJSON(jsonValue));
    }

    /**
     * 
     * get_bookings_pro <GET>
     */
    async getBookingsGetBookingsPro(page?: number, venueId?: number | null, eventDate?: string | null, bookingStatusFilter?: BookingStatusFilter | null, bookingPeriodBeginningDate?: string | null, bookingPeriodEndingDate?: string | null, offerType?: OfferType | null, extra?: string, initOverrides?: RequestInit): Promise<ListBookingsResponseModel> {
        const response = await this.getBookingsGetBookingsProRaw({ page: page, venueId: venueId, eventDate: eventDate, bookingStatusFilter: bookingStatusFilter, bookingPeriodBeginningDate: bookingPeriodBeginningDate, bookingPeriodEndingDate: bookingPeriodEndingDate, offerType: offerType, extra: extra }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * get_collective_bookings_pro <GET>
     */
    async getCollectiveGetCollectiveBookingsProRaw(requestParameters: GetCollectiveGetCollectiveBookingsProRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ListCollectiveBookingsResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.venueId !== undefined) {
            queryParameters['venueId'] = requestParameters.venueId;
        }

        if (requestParameters.eventDate !== undefined) {
            queryParameters['eventDate'] = (requestParameters.eventDate as any).toISOString();
        }

        if (requestParameters.bookingStatusFilter !== undefined) {
            queryParameters['bookingStatusFilter'] = requestParameters.bookingStatusFilter;
        }

        if (requestParameters.bookingPeriodBeginningDate !== undefined) {
            queryParameters['bookingPeriodBeginningDate'] = (requestParameters.bookingPeriodBeginningDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.bookingPeriodEndingDate !== undefined) {
            queryParameters['bookingPeriodEndingDate'] = (requestParameters.bookingPeriodEndingDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.extra !== undefined) {
            queryParameters['extra'] = requestParameters.extra;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/collective/bookings/pro`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListCollectiveBookingsResponseModelFromJSON(jsonValue));
    }

    /**
     * 
     * get_collective_bookings_pro <GET>
     */
    async getCollectiveGetCollectiveBookingsPro(page?: number, venueId?: number | null, eventDate?: Date | null, bookingStatusFilter?: CollectiveBookingStatusFilter | null, bookingPeriodBeginningDate?: Date | null, bookingPeriodEndingDate?: Date | null, extra?: string, initOverrides?: RequestInit): Promise<ListCollectiveBookingsResponseModel> {
        const response = await this.getCollectiveGetCollectiveBookingsProRaw({ page: page, venueId: venueId, eventDate: eventDate, bookingStatusFilter: bookingStatusFilter, bookingPeriodBeginningDate: bookingPeriodBeginningDate, bookingPeriodEndingDate: bookingPeriodEndingDate, extra: extra }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * get_collective_offer <GET>
     */
    async getCollectiveGetCollectiveOfferRaw(requestParameters: GetCollectiveGetCollectiveOfferRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetCollectiveOfferResponseModel>> {
        if (requestParameters.offerId === null || requestParameters.offerId === undefined) {
            throw new runtime.RequiredError('offerId','Required parameter requestParameters.offerId was null or undefined when calling getCollectiveGetCollectiveOffer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/collective/offers/{offer_id}`.replace(`{${"offer_id"}}`, encodeURIComponent(String(requestParameters.offerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCollectiveOfferResponseModelFromJSON(jsonValue));
    }

    /**
     * 
     * get_collective_offer <GET>
     */
    async getCollectiveGetCollectiveOffer(offerId: string, initOverrides?: RequestInit): Promise<GetCollectiveOfferResponseModel> {
        const response = await this.getCollectiveGetCollectiveOfferRaw({ offerId: offerId }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * list_collective_offers <GET>
     */
    async getCollectiveListCollectiveOffersRaw(requestParameters: GetCollectiveListCollectiveOffersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CollectiveOfferResponseModel>>> {
        const queryParameters: any = {};

        if (requestParameters.nameOrIsbn !== undefined) {
            queryParameters['nameOrIsbn'] = requestParameters.nameOrIsbn;
        }

        if (requestParameters.offererId !== undefined) {
            queryParameters['offererId'] = requestParameters.offererId;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.venueId !== undefined) {
            queryParameters['venueId'] = requestParameters.venueId;
        }

        if (requestParameters.categoryId !== undefined) {
            queryParameters['categoryId'] = requestParameters.categoryId;
        }

        if (requestParameters.creationMode !== undefined) {
            queryParameters['creationMode'] = requestParameters.creationMode;
        }

        if (requestParameters.periodBeginningDate !== undefined) {
            queryParameters['periodBeginningDate'] = requestParameters.periodBeginningDate;
        }

        if (requestParameters.periodEndingDate !== undefined) {
            queryParameters['periodEndingDate'] = requestParameters.periodEndingDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/collective/offers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CollectiveOfferResponseModelFromJSON));
    }

    /**
     * 
     * list_collective_offers <GET>
     */
    async getCollectiveListCollectiveOffers(nameOrIsbn?: string | null, offererId?: number | null, status?: string | null, venueId?: number | null, categoryId?: string | null, creationMode?: string | null, periodBeginningDate?: string | null, periodEndingDate?: string | null, initOverrides?: RequestInit): Promise<Array<CollectiveOfferResponseModel>> {
        const response = await this.getCollectiveListCollectiveOffersRaw({ nameOrIsbn: nameOrIsbn, offererId: offererId, status: status, venueId: venueId, categoryId: categoryId, creationMode: creationMode, periodBeginningDate: periodBeginningDate, periodEndingDate: periodEndingDate }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * list_features <GET>
     */
    async getFeaturesListFeaturesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<FeatureResponseModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/features`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FeatureResponseModelFromJSON));
    }

    /**
     * 
     * list_features <GET>
     */
    async getFeaturesListFeatures(initOverrides?: RequestInit): Promise<Array<FeatureResponseModel>> {
        const response = await this.getFeaturesListFeaturesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     * get_business_units <GET>
     */
    async getFinanceGetBusinessUnitsRaw(requestParameters: GetFinanceGetBusinessUnitsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<BusinessUnitResponseModel>>> {
        const queryParameters: any = {};

        if (requestParameters.offererId !== undefined) {
            queryParameters['offererId'] = requestParameters.offererId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/finance/business-units`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BusinessUnitResponseModelFromJSON));
    }

    /**
     * 
     * get_business_units <GET>
     */
    async getFinanceGetBusinessUnits(offererId?: number | null, initOverrides?: RequestInit): Promise<Array<BusinessUnitResponseModel>> {
        const response = await this.getFinanceGetBusinessUnitsRaw({ offererId: offererId }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * get_invoices <GET>
     */
    async getFinanceGetInvoicesRaw(requestParameters: GetFinanceGetInvoicesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<InvoiceResponseModel>>> {
        const queryParameters: any = {};

        if (requestParameters.businessUnitId !== undefined) {
            queryParameters['businessUnitId'] = requestParameters.businessUnitId;
        }

        if (requestParameters.periodBeginningDate !== undefined) {
            queryParameters['periodBeginningDate'] = (requestParameters.periodBeginningDate as any).toISOString().substr(0,10);
        }

        if (requestParameters.periodEndingDate !== undefined) {
            queryParameters['periodEndingDate'] = (requestParameters.periodEndingDate as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/finance/invoices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InvoiceResponseModelFromJSON));
    }

    /**
     * 
     * get_invoices <GET>
     */
    async getFinanceGetInvoices(businessUnitId?: number | null, periodBeginningDate?: Date | null, periodEndingDate?: Date | null, initOverrides?: RequestInit): Promise<Array<InvoiceResponseModel>> {
        const response = await this.getFinanceGetInvoicesRaw({ businessUnitId: businessUnitId, periodBeginningDate: periodBeginningDate, periodEndingDate: periodEndingDate }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * can_offerer_create_educational_offer <GET>
     */
    async getOfferersCanOffererCreateEducationalOfferRaw(requestParameters: GetOfferersCanOffererCreateEducationalOfferRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.humanizedOffererId === null || requestParameters.humanizedOffererId === undefined) {
            throw new runtime.RequiredError('humanizedOffererId','Required parameter requestParameters.humanizedOffererId was null or undefined when calling getOfferersCanOffererCreateEducationalOffer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/offerers/{humanized_offerer_id}/eac-eligibility`.replace(`{${"humanized_offerer_id"}}`, encodeURIComponent(String(requestParameters.humanizedOffererId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * can_offerer_create_educational_offer <GET>
     */
    async getOfferersCanOffererCreateEducationalOffer(humanizedOffererId: string, initOverrides?: RequestInit): Promise<void> {
        await this.getOfferersCanOffererCreateEducationalOfferRaw({ humanizedOffererId: humanizedOffererId }, initOverrides);
    }

    /**
     * 
     * get_offerer <GET>
     */
    async getOfferersGetOffererRaw(requestParameters: GetOfferersGetOffererRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetOffererResponseModel>> {
        if (requestParameters.offererId === null || requestParameters.offererId === undefined) {
            throw new runtime.RequiredError('offererId','Required parameter requestParameters.offererId was null or undefined when calling getOfferersGetOfferer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/offerers/{offerer_id}`.replace(`{${"offerer_id"}}`, encodeURIComponent(String(requestParameters.offererId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOffererResponseModelFromJSON(jsonValue));
    }

    /**
     * 
     * get_offerer <GET>
     */
    async getOfferersGetOfferer(offererId: string, initOverrides?: RequestInit): Promise<GetOffererResponseModel> {
        const response = await this.getOfferersGetOffererRaw({ offererId: offererId }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * get_offerers <GET>
     */
    async getOfferersGetOfferersRaw(requestParameters: GetOfferersGetOfferersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetOfferersListResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters.keywords !== undefined) {
            queryParameters['keywords'] = requestParameters.keywords;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.paginate !== undefined) {
            queryParameters['paginate'] = requestParameters.paginate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/offerers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOfferersListResponseModelFromJSON(jsonValue));
    }

    /**
     * 
     * get_offerers <GET>
     */
    async getOfferersGetOfferers(keywords?: string | null, page?: number | null, paginate?: number | null, initOverrides?: RequestInit): Promise<GetOfferersListResponseModel> {
        const response = await this.getOfferersGetOfferersRaw({ keywords: keywords, page: page, paginate: paginate }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * list_educational_offerers <GET>
     */
    async getOfferersListEducationalOfferersRaw(requestParameters: GetOfferersListEducationalOfferersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetEducationalOfferersResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters.offererId !== undefined) {
            queryParameters['offerer_id'] = requestParameters.offererId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/offerers/educational`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEducationalOfferersResponseModelFromJSON(jsonValue));
    }

    /**
     * 
     * list_educational_offerers <GET>
     */
    async getOfferersListEducationalOfferers(offererId?: string | null, initOverrides?: RequestInit): Promise<GetEducationalOfferersResponseModel> {
        const response = await this.getOfferersListEducationalOfferersRaw({ offererId: offererId }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * list_offerers_names <GET>
     */
    async getOfferersListOfferersNamesRaw(requestParameters: GetOfferersListOfferersNamesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetOfferersNamesResponseModel>> {
        const queryParameters: any = {};

        if (requestParameters.validated !== undefined) {
            queryParameters['validated'] = requestParameters.validated;
        }

        if (requestParameters.validatedForUser !== undefined) {
            queryParameters['validated_for_user'] = requestParameters.validatedForUser;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/offerers/names`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOfferersNamesResponseModelFromJSON(jsonValue));
    }

    /**
     * 
     * list_offerers_names <GET>
     */
    async getOfferersListOfferersNames(validated?: boolean | null, validatedForUser?: boolean | null, initOverrides?: RequestInit): Promise<GetOfferersNamesResponseModel> {
        const response = await this.getOfferersListOfferersNamesRaw({ validated: validated, validatedForUser: validatedForUser }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * get_categories <GET>
     */
    async getOffersGetCategoriesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<CategoriesResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/offers/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoriesResponseModelFromJSON(jsonValue));
    }

    /**
     * 
     * get_categories <GET>
     */
    async getOffersGetCategories(initOverrides?: RequestInit): Promise<CategoriesResponseModel> {
        const response = await this.getOffersGetCategoriesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     * get_offer <GET>
     */
    async getOffersGetOfferRaw(requestParameters: GetOffersGetOfferRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetIndividualOfferResponseModel>> {
        if (requestParameters.offerId === null || requestParameters.offerId === undefined) {
            throw new runtime.RequiredError('offerId','Required parameter requestParameters.offerId was null or undefined when calling getOffersGetOffer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/offers/{offer_id}`.replace(`{${"offer_id"}}`, encodeURIComponent(String(requestParameters.offerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetIndividualOfferResponseModelFromJSON(jsonValue));
    }

    /**
     * 
     * get_offer <GET>
     */
    async getOffersGetOffer(offerId: string, initOverrides?: RequestInit): Promise<GetIndividualOfferResponseModel> {
        const response = await this.getOffersGetOfferRaw({ offerId: offerId }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * get_stocks <GET>
     */
    async getOffersGetStocksRaw(requestParameters: GetOffersGetStocksRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StocksResponseModel>> {
        if (requestParameters.offerId === null || requestParameters.offerId === undefined) {
            throw new runtime.RequiredError('offerId','Required parameter requestParameters.offerId was null or undefined when calling getOffersGetStocks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/offers/{offer_id}/stocks`.replace(`{${"offer_id"}}`, encodeURIComponent(String(requestParameters.offerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StocksResponseModelFromJSON(jsonValue));
    }

    /**
     * 
     * get_stocks <GET>
     */
    async getOffersGetStocks(offerId: string, initOverrides?: RequestInit): Promise<StocksResponseModel> {
        const response = await this.getOffersGetStocksRaw({ offerId: offerId }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * list_offers <GET>
     */
    async getOffersListOffersRaw(requestParameters: GetOffersListOffersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ListOffersOfferResponseModel>>> {
        const queryParameters: any = {};

        if (requestParameters.nameOrIsbn !== undefined) {
            queryParameters['nameOrIsbn'] = requestParameters.nameOrIsbn;
        }

        if (requestParameters.offererId !== undefined) {
            queryParameters['offererId'] = requestParameters.offererId;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.venueId !== undefined) {
            queryParameters['venueId'] = requestParameters.venueId;
        }

        if (requestParameters.categoryId !== undefined) {
            queryParameters['categoryId'] = requestParameters.categoryId;
        }

        if (requestParameters.creationMode !== undefined) {
            queryParameters['creationMode'] = requestParameters.creationMode;
        }

        if (requestParameters.periodBeginningDate !== undefined) {
            queryParameters['periodBeginningDate'] = requestParameters.periodBeginningDate;
        }

        if (requestParameters.periodEndingDate !== undefined) {
            queryParameters['periodEndingDate'] = requestParameters.periodEndingDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/offers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ListOffersOfferResponseModelFromJSON));
    }

    /**
     * 
     * list_offers <GET>
     */
    async getOffersListOffers(nameOrIsbn?: string | null, offererId?: number | null, status?: string | null, venueId?: number | null, categoryId?: string | null, creationMode?: string | null, periodBeginningDate?: string | null, periodEndingDate?: string | null, initOverrides?: RequestInit): Promise<Array<ListOffersOfferResponseModel>> {
        const response = await this.getOffersListOffersRaw({ nameOrIsbn: nameOrIsbn, offererId: offererId, status: status, venueId: venueId, categoryId: categoryId, creationMode: creationMode, periodBeginningDate: periodBeginningDate, periodEndingDate: periodEndingDate }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * get_reimbursements_csv <GET>
     */
    async getReimbursementsGetReimbursementsCsvRaw(requestParameters: GetReimbursementsGetReimbursementsCsvRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.venueId !== undefined) {
            queryParameters['venueId'] = requestParameters.venueId;
        }

        if (requestParameters.reimbursementPeriodBeginningDate !== undefined) {
            queryParameters['reimbursementPeriodBeginningDate'] = requestParameters.reimbursementPeriodBeginningDate;
        }

        if (requestParameters.reimbursementPeriodEndingDate !== undefined) {
            queryParameters['reimbursementPeriodEndingDate'] = requestParameters.reimbursementPeriodEndingDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reimbursements/csv`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * get_reimbursements_csv <GET>
     */
    async getReimbursementsGetReimbursementsCsv(venueId?: string, reimbursementPeriodBeginningDate?: string, reimbursementPeriodEndingDate?: string, initOverrides?: RequestInit): Promise<void> {
        await this.getReimbursementsGetReimbursementsCsvRaw({ venueId: venueId, reimbursementPeriodBeginningDate: reimbursementPeriodBeginningDate, reimbursementPeriodEndingDate: reimbursementPeriodEndingDate }, initOverrides);
    }

    /**
     * 
     * get_user_offerer <GET>
     */
    async getUserofferersGetUserOffererRaw(requestParameters: GetUserofferersGetUserOffererRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<UserOffererResponseModel>>> {
        if (requestParameters.offererId === null || requestParameters.offererId === undefined) {
            throw new runtime.RequiredError('offererId','Required parameter requestParameters.offererId was null or undefined when calling getUserofferersGetUserOfferer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/userOfferers/{offerer_id}`.replace(`{${"offerer_id"}}`, encodeURIComponent(String(requestParameters.offererId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserOffererResponseModelFromJSON));
    }

    /**
     * 
     * get_user_offerer <GET>
     */
    async getUserofferersGetUserOfferer(offererId: string, initOverrides?: RequestInit): Promise<Array<UserOffererResponseModel>> {
        const response = await this.getUserofferersGetUserOffererRaw({ offererId: offererId }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * check_activation_token_exists <GET>
     */
    async getUsersCheckActivationTokenExistsRaw(requestParameters: GetUsersCheckActivationTokenExistsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling getUsersCheckActivationTokenExists.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/token/{token}`.replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * check_activation_token_exists <GET>
     */
    async getUsersCheckActivationTokenExists(token: string, initOverrides?: RequestInit): Promise<void> {
        await this.getUsersCheckActivationTokenExistsRaw({ token: token }, initOverrides);
    }

    /**
     * 
     * get_profile <GET>
     */
    async getUsersGetProfileRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<SharedCurrentUserResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/current`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SharedCurrentUserResponseModelFromJSON(jsonValue));
    }

    /**
     * 
     * get_profile <GET>
     */
    async getUsersGetProfile(initOverrides?: RequestInit): Promise<SharedCurrentUserResponseModel> {
        const response = await this.getUsersGetProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     * fetch_venue_labels <GET>
     */
    async getVenueLabelsFetchVenueLabelsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<VenueLabelResponseModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/venue-labels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VenueLabelResponseModelFromJSON));
    }

    /**
     * 
     * fetch_venue_labels <GET>
     */
    async getVenueLabelsFetchVenueLabels(initOverrides?: RequestInit): Promise<Array<VenueLabelResponseModel>> {
        const response = await this.getVenueLabelsFetchVenueLabelsRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     * get_venue_types <GET>
     */
    async getVenueTypesGetVenueTypesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<VenueTypeResponseModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/venue-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VenueTypeResponseModelFromJSON));
    }

    /**
     * 
     * get_venue_types <GET>
     */
    async getVenueTypesGetVenueTypes(initOverrides?: RequestInit): Promise<Array<VenueTypeResponseModel>> {
        const response = await this.getVenueTypesGetVenueTypesRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     * list_venue_providers <GET>
     */
    async getVenueprovidersListVenueProvidersRaw(requestParameters: GetVenueprovidersListVenueProvidersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ListVenueProviderResponse>> {
        if (requestParameters.venueId === null || requestParameters.venueId === undefined) {
            throw new runtime.RequiredError('venueId','Required parameter requestParameters.venueId was null or undefined when calling getVenueprovidersListVenueProviders.');
        }

        const queryParameters: any = {};

        if (requestParameters.venueId !== undefined) {
            queryParameters['venueId'] = requestParameters.venueId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/venueProviders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListVenueProviderResponseFromJSON(jsonValue));
    }

    /**
     * 
     * list_venue_providers <GET>
     */
    async getVenueprovidersListVenueProviders(venueId: number, initOverrides?: RequestInit): Promise<ListVenueProviderResponse> {
        const response = await this.getVenueprovidersListVenueProvidersRaw({ venueId: venueId }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * get_venue <GET>
     */
    async getVenuesGetVenueRaw(requestParameters: GetVenuesGetVenueRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetVenueResponseModel>> {
        if (requestParameters.venueId === null || requestParameters.venueId === undefined) {
            throw new runtime.RequiredError('venueId','Required parameter requestParameters.venueId was null or undefined when calling getVenuesGetVenue.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/venues/{venue_id}`.replace(`{${"venue_id"}}`, encodeURIComponent(String(requestParameters.venueId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetVenueResponseModelFromJSON(jsonValue));
    }

    /**
     * 
     * get_venue <GET>
     */
    async getVenuesGetVenue(venueId: string, initOverrides?: RequestInit): Promise<GetVenueResponseModel> {
        const response = await this.getVenuesGetVenueRaw({ venueId: venueId }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * get_venue_stats <GET>
     */
    async getVenuesGetVenueStatsRaw(requestParameters: GetVenuesGetVenueStatsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VenueStatsResponseModel>> {
        if (requestParameters.humanizedVenueId === null || requestParameters.humanizedVenueId === undefined) {
            throw new runtime.RequiredError('humanizedVenueId','Required parameter requestParameters.humanizedVenueId was null or undefined when calling getVenuesGetVenueStats.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/venues/{humanized_venue_id}/stats`.replace(`{${"humanized_venue_id"}}`, encodeURIComponent(String(requestParameters.humanizedVenueId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueStatsResponseModelFromJSON(jsonValue));
    }

    /**
     * 
     * get_venue_stats <GET>
     */
    async getVenuesGetVenueStats(humanizedVenueId: string, initOverrides?: RequestInit): Promise<VenueStatsResponseModel> {
        const response = await this.getVenuesGetVenueStatsRaw({ humanizedVenueId: humanizedVenueId }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * edit_business_unit <PATCH>
     */
    async patchFinanceEditBusinessUnitRaw(requestParameters: PatchFinanceEditBusinessUnitRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.businessUnitId === null || requestParameters.businessUnitId === undefined) {
            throw new runtime.RequiredError('businessUnitId','Required parameter requestParameters.businessUnitId was null or undefined when calling patchFinanceEditBusinessUnit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/finance/business-units/{business_unit_id}`.replace(`{${"business_unit_id"}}`, encodeURIComponent(String(requestParameters.businessUnitId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BusinessUnitEditionBodyModelToJSON(requestParameters.businessUnitEditionBodyModel),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * edit_business_unit <PATCH>
     */
    async patchFinanceEditBusinessUnit(businessUnitId: number, businessUnitEditionBodyModel?: BusinessUnitEditionBodyModel, initOverrides?: RequestInit): Promise<void> {
        await this.patchFinanceEditBusinessUnitRaw({ businessUnitId: businessUnitId, businessUnitEditionBodyModel: businessUnitEditionBodyModel }, initOverrides);
    }

    /**
     * 
     * cancel_educational_offer_booking <PATCH>
     */
    async patchOffersCancelEducationalOfferBookingRaw(requestParameters: PatchOffersCancelEducationalOfferBookingRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.offerId === null || requestParameters.offerId === undefined) {
            throw new runtime.RequiredError('offerId','Required parameter requestParameters.offerId was null or undefined when calling patchOffersCancelEducationalOfferBooking.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/offers/{offer_id}/cancel_booking`.replace(`{${"offer_id"}}`, encodeURIComponent(String(requestParameters.offerId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * cancel_educational_offer_booking <PATCH>
     */
    async patchOffersCancelEducationalOfferBooking(offerId: string, initOverrides?: RequestInit): Promise<void> {
        await this.patchOffersCancelEducationalOfferBookingRaw({ offerId: offerId }, initOverrides);
    }

    /**
     * 
     * edit_educational_offer <PATCH>
     */
    async patchOffersEditEducationalOfferRaw(requestParameters: PatchOffersEditEducationalOfferRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OfferResponseIdModel>> {
        if (requestParameters.offerId === null || requestParameters.offerId === undefined) {
            throw new runtime.RequiredError('offerId','Required parameter requestParameters.offerId was null or undefined when calling patchOffersEditEducationalOffer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/offers/educational/{offer_id}`.replace(`{${"offer_id"}}`, encodeURIComponent(String(requestParameters.offerId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchEducationalOfferBodyModelToJSON(requestParameters.patchEducationalOfferBodyModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OfferResponseIdModelFromJSON(jsonValue));
    }

    /**
     * 
     * edit_educational_offer <PATCH>
     */
    async patchOffersEditEducationalOffer(offerId: string, patchEducationalOfferBodyModel?: PatchEducationalOfferBodyModel, initOverrides?: RequestInit): Promise<OfferResponseIdModel> {
        const response = await this.patchOffersEditEducationalOfferRaw({ offerId: offerId, patchEducationalOfferBodyModel: patchEducationalOfferBodyModel }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * patch_all_offers_active_status <PATCH>
     */
    async patchOffersPatchAllOffersActiveStatusRaw(requestParameters: PatchOffersPatchAllOffersActiveStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/offers/all-active-status`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchAllOffersActiveStatusBodyModelToJSON(requestParameters.patchAllOffersActiveStatusBodyModel),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * patch_all_offers_active_status <PATCH>
     */
    async patchOffersPatchAllOffersActiveStatus(patchAllOffersActiveStatusBodyModel?: PatchAllOffersActiveStatusBodyModel, initOverrides?: RequestInit): Promise<void> {
        await this.patchOffersPatchAllOffersActiveStatusRaw({ patchAllOffersActiveStatusBodyModel: patchAllOffersActiveStatusBodyModel }, initOverrides);
    }

    /**
     * 
     * patch_offer <PATCH>
     */
    async patchOffersPatchOfferRaw(requestParameters: PatchOffersPatchOfferRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OfferResponseIdModel>> {
        if (requestParameters.offerId === null || requestParameters.offerId === undefined) {
            throw new runtime.RequiredError('offerId','Required parameter requestParameters.offerId was null or undefined when calling patchOffersPatchOffer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/offers/{offer_id}`.replace(`{${"offer_id"}}`, encodeURIComponent(String(requestParameters.offerId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchOfferBodyModelToJSON(requestParameters.patchOfferBodyModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OfferResponseIdModelFromJSON(jsonValue));
    }

    /**
     * 
     * patch_offer <PATCH>
     */
    async patchOffersPatchOffer(offerId: string, patchOfferBodyModel?: PatchOfferBodyModel, initOverrides?: RequestInit): Promise<OfferResponseIdModel> {
        const response = await this.patchOffersPatchOfferRaw({ offerId: offerId, patchOfferBodyModel: patchOfferBodyModel }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * patch_offers_active_status <PATCH>
     */
    async patchOffersPatchOffersActiveStatusRaw(requestParameters: PatchOffersPatchOffersActiveStatusRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/offers/active-status`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchOfferActiveStatusBodyModelToJSON(requestParameters.patchOfferActiveStatusBodyModel),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * patch_offers_active_status <PATCH>
     */
    async patchOffersPatchOffersActiveStatus(patchOfferActiveStatusBodyModel?: PatchOfferActiveStatusBodyModel, initOverrides?: RequestInit): Promise<void> {
        await this.patchOffersPatchOffersActiveStatusRaw({ patchOfferActiveStatusBodyModel: patchOfferActiveStatusBodyModel }, initOverrides);
    }

    /**
     * 
     * edit_educational_stock <PATCH>
     */
    async patchStocksEditEducationalStockRaw(requestParameters: PatchStocksEditEducationalStockRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.stockId === null || requestParameters.stockId === undefined) {
            throw new runtime.RequiredError('stockId','Required parameter requestParameters.stockId was null or undefined when calling patchStocksEditEducationalStock.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/stocks/educational/{stock_id}`.replace(`{${"stock_id"}}`, encodeURIComponent(String(requestParameters.stockId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EducationalStockEditionBodyModelToJSON(requestParameters.educationalStockEditionBodyModel),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * edit_educational_stock <PATCH>
     */
    async patchStocksEditEducationalStock(stockId: string, educationalStockEditionBodyModel?: EducationalStockEditionBodyModel, initOverrides?: RequestInit): Promise<void> {
        await this.patchStocksEditEducationalStockRaw({ stockId: stockId, educationalStockEditionBodyModel: educationalStockEditionBodyModel }, initOverrides);
    }

    /**
     * 
     * patch_pro_user_rgs_seen <PATCH>
     */
    async patchUsersPatchProUserRgsSeenRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/rgs-seen`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * patch_pro_user_rgs_seen <PATCH>
     */
    async patchUsersPatchProUserRgsSeen(initOverrides?: RequestInit): Promise<void> {
        await this.patchUsersPatchProUserRgsSeenRaw(initOverrides);
    }

    /**
     * 
     * patch_profile <PATCH>
     */
    async patchUsersPatchProfileRaw(requestParameters: PatchUsersPatchProfileRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PatchProUserResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/current`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchProUserBodyModelToJSON(requestParameters.patchProUserBodyModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatchProUserResponseModelFromJSON(jsonValue));
    }

    /**
     * 
     * patch_profile <PATCH>
     */
    async patchUsersPatchProfile(patchProUserBodyModel?: PatchProUserBodyModel, initOverrides?: RequestInit): Promise<PatchProUserResponseModel> {
        const response = await this.patchUsersPatchProfileRaw({ patchProUserBodyModel: patchProUserBodyModel }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * patch_user_tuto_seen <PATCH>
     */
    async patchUsersPatchUserTutoSeenRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/tuto-seen`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * patch_user_tuto_seen <PATCH>
     */
    async patchUsersPatchUserTutoSeen(initOverrides?: RequestInit): Promise<void> {
        await this.patchUsersPatchUserTutoSeenRaw(initOverrides);
    }

    /**
     * 
     * validate_user <PATCH>
     */
    async patchValidateValidateUserRaw(requestParameters: PatchValidateValidateUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling patchValidateValidateUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/validate/user/{token}`.replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * validate_user <PATCH>
     */
    async patchValidateValidateUser(token: string, initOverrides?: RequestInit): Promise<void> {
        await this.patchValidateValidateUserRaw({ token: token }, initOverrides);
    }

    /**
     * 
     * edit_venue <PATCH>
     */
    async patchVenuesEditVenueRaw(requestParameters: PatchVenuesEditVenueRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetVenueResponseModel>> {
        if (requestParameters.venueId === null || requestParameters.venueId === undefined) {
            throw new runtime.RequiredError('venueId','Required parameter requestParameters.venueId was null or undefined when calling patchVenuesEditVenue.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/venues/{venue_id}`.replace(`{${"venue_id"}}`, encodeURIComponent(String(requestParameters.venueId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EditVenueBodyModelToJSON(requestParameters.editVenueBodyModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetVenueResponseModelFromJSON(jsonValue));
    }

    /**
     * 
     * edit_venue <PATCH>
     */
    async patchVenuesEditVenue(venueId: string, editVenueBodyModel?: EditVenueBodyModel, initOverrides?: RequestInit): Promise<GetVenueResponseModel> {
        const response = await this.patchVenuesEditVenueRaw({ venueId: venueId, editVenueBodyModel: editVenueBodyModel }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * create_offerer <POST>
     */
    async postOfferersCreateOffererRaw(requestParameters: PostOfferersCreateOffererRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GetOffererResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/offerers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOffererQueryModelToJSON(requestParameters.createOffererQueryModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetOffererResponseModelFromJSON(jsonValue));
    }

    /**
     * 
     * create_offerer <POST>
     */
    async postOfferersCreateOfferer(createOffererQueryModel?: CreateOffererQueryModel, initOverrides?: RequestInit): Promise<GetOffererResponseModel> {
        const response = await this.postOfferersCreateOffererRaw({ createOffererQueryModel: createOffererQueryModel }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * generate_api_key_route <POST>
     */
    async postOfferersGenerateApiKeyRouteRaw(requestParameters: PostOfferersGenerateApiKeyRouteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<GenerateOffererApiKeyResponse>> {
        if (requestParameters.offererId === null || requestParameters.offererId === undefined) {
            throw new runtime.RequiredError('offererId','Required parameter requestParameters.offererId was null or undefined when calling postOfferersGenerateApiKeyRoute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/offerers/{offerer_id}/api_keys`.replace(`{${"offerer_id"}}`, encodeURIComponent(String(requestParameters.offererId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GenerateOffererApiKeyResponseFromJSON(jsonValue));
    }

    /**
     * 
     * generate_api_key_route <POST>
     */
    async postOfferersGenerateApiKeyRoute(offererId: string, initOverrides?: RequestInit): Promise<GenerateOffererApiKeyResponse> {
        const response = await this.postOfferersGenerateApiKeyRouteRaw({ offererId: offererId }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * create_educational_offer <POST>
     */
    async postOffersCreateEducationalOfferRaw(requestParameters: PostOffersCreateEducationalOfferRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OfferResponseIdModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/offers/educational`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostEducationalOfferBodyModelToJSON(requestParameters.postEducationalOfferBodyModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OfferResponseIdModelFromJSON(jsonValue));
    }

    /**
     * 
     * create_educational_offer <POST>
     */
    async postOffersCreateEducationalOffer(postEducationalOfferBodyModel?: PostEducationalOfferBodyModel, initOverrides?: RequestInit): Promise<OfferResponseIdModel> {
        const response = await this.postOffersCreateEducationalOfferRaw({ postEducationalOfferBodyModel: postEducationalOfferBodyModel }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * create_thumbnail <POST>
     */
    async postOffersCreateThumbnailRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<CreateThumbnailResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/offers/thumbnails/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateThumbnailResponseModelFromJSON(jsonValue));
    }

    /**
     * 
     * create_thumbnail <POST>
     */
    async postOffersCreateThumbnail(initOverrides?: RequestInit): Promise<CreateThumbnailResponseModel> {
        const response = await this.postOffersCreateThumbnailRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     * post_offer <POST>
     */
    async postOffersPostOfferRaw(requestParameters: PostOffersPostOfferRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OfferResponseIdModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/offers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostOfferBodyModelToJSON(requestParameters.postOfferBodyModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OfferResponseIdModelFromJSON(jsonValue));
    }

    /**
     * 
     * post_offer <POST>
     */
    async postOffersPostOffer(postOfferBodyModel?: PostOfferBodyModel, initOverrides?: RequestInit): Promise<OfferResponseIdModel> {
        const response = await this.postOffersPostOfferRaw({ postOfferBodyModel: postOfferBodyModel }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * create_educational_stock <POST>
     */
    async postStocksCreateEducationalStockRaw(requestParameters: PostStocksCreateEducationalStockRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StockIdResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/stocks/educational`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EducationalStockCreationBodyModelToJSON(requestParameters.educationalStockCreationBodyModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StockIdResponseModelFromJSON(jsonValue));
    }

    /**
     * 
     * create_educational_stock <POST>
     */
    async postStocksCreateEducationalStock(educationalStockCreationBodyModel?: EducationalStockCreationBodyModel, initOverrides?: RequestInit): Promise<StockIdResponseModel> {
        const response = await this.postStocksCreateEducationalStockRaw({ educationalStockCreationBodyModel: educationalStockCreationBodyModel }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * upsert_stocks <POST>
     */
    async postStocksUpsertStocksRaw(requestParameters: PostStocksUpsertStocksRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StockIdsResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/stocks/bulk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StocksUpsertBodyModelToJSON(requestParameters.stocksUpsertBodyModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StockIdsResponseModelFromJSON(jsonValue));
    }

    /**
     * 
     * upsert_stocks <POST>
     */
    async postStocksUpsertStocks(stocksUpsertBodyModel?: StocksUpsertBodyModel, initOverrides?: RequestInit): Promise<StockIdsResponseModel> {
        const response = await this.postStocksUpsertStocksRaw({ stocksUpsertBodyModel: stocksUpsertBodyModel }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * signin <POST>
     */
    async postUsersSigninRaw(requestParameters: PostUsersSigninRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SharedLoginUserResponseModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/signin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginUserBodyModelToJSON(requestParameters.loginUserBodyModel),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SharedLoginUserResponseModelFromJSON(jsonValue));
    }

    /**
     * 
     * signin <POST>
     */
    async postUsersSignin(loginUserBodyModel?: LoginUserBodyModel, initOverrides?: RequestInit): Promise<SharedLoginUserResponseModel> {
        const response = await this.postUsersSigninRaw({ loginUserBodyModel: loginUserBodyModel }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * create_venue_provider <POST>
     */
    async postVenueprovidersCreateVenueProviderRaw(requestParameters: PostVenueprovidersCreateVenueProviderRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VenueProviderResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/venueProviders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostVenueProviderBodyToJSON(requestParameters.postVenueProviderBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueProviderResponseFromJSON(jsonValue));
    }

    /**
     * 
     * create_venue_provider <POST>
     */
    async postVenueprovidersCreateVenueProvider(postVenueProviderBody?: PostVenueProviderBody, initOverrides?: RequestInit): Promise<VenueProviderResponse> {
        const response = await this.postVenueprovidersCreateVenueProviderRaw({ postVenueProviderBody: postVenueProviderBody }, initOverrides);
        return await response.value();
    }

    /**
     * 
     * update_venue_provider <PUT>
     */
    async putVenueprovidersUpdateVenueProviderRaw(requestParameters: PutVenueprovidersUpdateVenueProviderRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VenueProviderResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/venueProviders`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostVenueProviderBodyToJSON(requestParameters.postVenueProviderBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VenueProviderResponseFromJSON(jsonValue));
    }

    /**
     * 
     * update_venue_provider <PUT>
     */
    async putVenueprovidersUpdateVenueProvider(postVenueProviderBody?: PostVenueProviderBody, initOverrides?: RequestInit): Promise<VenueProviderResponse> {
        const response = await this.putVenueprovidersUpdateVenueProviderRaw({ postVenueProviderBody: postVenueProviderBody }, initOverrides);
        return await response.value();
    }

}
